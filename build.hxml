# The build.hxml file specifies all the command-line parameters that you would normally pass to
# the haxe compiler.

# Add a directory for where to find source files.  You can specify multiple directories.
-cp src

# Use a slightly more minifiable Javascript output.  This will be the default in Haxe 3.2
-D js-flatten

# Create output that takes advantage of browsers that implement ECMAScript 5
-D js-es5

# Use full dead-code elimination.
-dce full

# Adding the debug flag will generate source-maps along with our Javascript files
-debug

# Specify the entry-point into our application
-main todomvc.App

# Include the jQueryExtern library so we can use jQuery
-lib jQueryExtern

# create a Javascript file at js/app.js
-js js/app.js


# The "next" directive allows multiple targets to be built from one hxml build file
--next

# First we define most of the compile parameters as above
-cp src
-debug
-D js-es5

# NOTE: We don't specify js-flatten here so that haxe exports the objects in a place that the main
# app.js file will expect them.
#-D js-flatten

# "sharedcode" is a custom flag used in Store.hx and Todo.hx to indicate that we want this code to
# be compiled instead of treated as an extern.
-D sharedcode

# NOTE: We don't use dead code elimination because we're not specifying an entry-point. Without an
# entry-point, nothing would be called and DCE would eliminate everything.
#-dce full

-js js/common.js

# Instead of specifying an entry-point, we specify all of the classes we want to include in this
# file.  These should be all that are associated with the "sharedcode" directive above.
todomvc.Store
todomvc.Todo
